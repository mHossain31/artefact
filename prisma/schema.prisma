// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  email            String            @unique
  password         String
  name             String?
  emailVerified    DateTime?
  verificationCode String?
  codeExpires      DateTime?
  workspaces       WorkspaceMember[]
  urls             Url[]
  sessions         Session[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model Workspace {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  members     WorkspaceMember[]
  urls        Url[]
  categories  Category[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Url {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  url         String
  description String?
  screenshot  String?
  favicon     String?
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?   @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @db.ObjectId
  addedBy     User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  color       String
  icon        String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @db.ObjectId
  urls        Url[]
  createdAt   DateTime  @default(now())
}

model WorkspaceMember {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @db.ObjectId
  role        Role      @default(VIEWER)
  joinedAt    DateTime  @default(now())

  @@unique([userId, workspaceId])
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}
